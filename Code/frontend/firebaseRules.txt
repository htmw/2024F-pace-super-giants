rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isRestaurantOwner(restaurantId) {
      return isAuthenticated() &&
             request.auth.uid == restaurantId &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == "restaurant";
    }

    function isCustomer() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == "customer";
    }

    function emailExists(email) {
      return exists(/databases/$(database)/documents/users/{userId}) &&
             get(/databases/$(database)/documents/users/{userId}).data.email == email;
    }

    match /users/{userId} {
      allow read: if isAuthenticated() &&
                 (request.auth.uid == userId ||
                  emailExists(request.auth.token.email));

      allow create: if isAuthenticated() &&
                   request.auth.uid == userId &&
                   (request.resource.data.userType == "customer" ||
                    request.resource.data.userType == "restaurant");

      allow update: if isAuthenticated() &&
                   request.auth.uid == userId &&
                   request.resource.data.userType == resource.data.userType;

      match /preferences/{preference} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }

      match /notifications/{notification} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    match /restaurants/{restaurantId} {
      allow read: if true;
      allow create: if isRestaurantOwner(restaurantId);
      allow update: if isRestaurantOwner(restaurantId);
      allow delete: if false;

      match /menuItems/{menuItem} {
        allow read: if true;
        allow create, update: if isRestaurantOwner(restaurantId) &&
                               request.resource.data.price >= 0 &&
                               request.resource.data.preparationTime >= 0;
        allow delete: if isRestaurantOwner(restaurantId);
      }

      match /orders/{orderId} {
        allow read: if isRestaurantOwner(restaurantId);
        allow create: if isCustomer() &&
                     request.resource.data.customerId == request.auth.uid &&
                     request.resource.data.total >= 0;
        allow update: if isRestaurantOwner(restaurantId) &&
                     request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['status', 'updatedAt']);
      }

      match /analytics/{document=**} {
        allow read: if isRestaurantOwner(restaurantId);
        allow write: if false;
      }
    }

    match /orders/{orderId} {
      allow read: if isAuthenticated() &&
                 (resource.data.customerId == request.auth.uid ||
                  resource.data.restaurantId == request.auth.uid);

      allow create: if isCustomer() &&
                   request.resource.data.customerId == request.auth.uid &&
                   request.resource.data.status == 'pending' &&
                   request.resource.data.total >= 0;

      allow update: if isAuthenticated() &&
                   (
                     (isCustomer() &&
                      resource.data.customerId == request.auth.uid &&
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['customerNotes', 'updatedAt'])) ||
                     (isRestaurantOwner(resource.data.restaurantId) &&
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['status', 'updatedAt', 'restaurantNotes']))
                   );
    }

    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isCustomer() &&
                   request.resource.data.customerId == request.auth.uid &&
                   exists(/databases/$(database)/documents/orders/$(request.resource.data.orderId)) &&
                   get(/databases/$(database)/documents/orders/$(request.resource.data.orderId)).data.customerId == request.auth.uid;
      allow update, delete: if isAuthenticated() &&
                           request.auth.uid == resource.data.customerId;
    }

    match /passwordResets/{resetId} {
      allow read: if isAuthenticated() &&
                 emailExists(request.auth.token.email);
      allow write: if false;
    }
  }
}
